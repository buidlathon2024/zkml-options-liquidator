// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {MockProtocol} from "../src/MockProtocol.sol";

contract LiquidationTest is Test {
    MockProtocol public mockProtocol;

    function setUp() public {
        mockProtocol = new MockProtocol();
    }

    function test_Liquidate() public {
        uint256[] memory instances = new uint256[](1); 
        instances[0] = 0x0000000000000000000000000000000000000000000000000000000000000073;
        string[] memory inputs = new string[](3);
        inputs[0] = "echo";
        inputs[1] = "-n";
        inputs[2] = "0x1a6bee3412d4db728bfbb41fb047d8848abaab309847749f5fe300fb12d540392ddc04ce3ec67c1894d2d910003cd22c27ee4873e26b0ffb94a3733296296051087750c3a75c2ad552f3313b4d56722fe64009ef72f34c086bb7db279638f287144be10b8b71f9fb28f20a5f36b643038b080ef55dedc204cb538dbcc7e26147261b18f74eaf1a55fb64d4b431cad3acb256c0b3f37e7425c1d8907317bf6cac161d1f9952a3d71dc2824a12c3a3db596d81480f60ce208ab53659f4ca1b2eda0b9c39ab0fdb7db7f7dca08a876e650dcee1ebb8b8a82f4b061f8948d4d5143d08d2a65256deedd782e9eb11da036586220ac02a71435ead61162da47f54e7411953e01f3944f5ebbc66480021c483491cc26cf818a0881a1b840348d082557f00bb845160da5dc494d5747e5ba2a91f86aa4d93c20f481e69ddfff700bdc18923e9081d0447cc901a53c3bf28351d1c14fc487ad5b354862e18c92e2dff8fb41877be747bab45d676ed84f3fc1afa69785806a4956141614cc745b6141be656185b2204d00d59cd541e08e3eb1cdf38ff9f253c208779c5018b800aca5cb5f329a9abd84db84358e331a61f480ad7c533268c7e8d46ce993c117feef847f690073f0ed50b3794409d9ba34022c8f69feabe96eff67454750f423b73994a4cde010a53c6ba0043abaa76ee3f855bb1ddbdccdd6a844ef03eb8fc0cfee02ede66025fd1b7015fc8e4909cf15ba3c26f16d623e201969155a7b8f0fdb96490308909a36f159e27ee52670fa452c4139c622ecb9569ce6d99a9b2d12a2a6f20b7e80656e3018f13435232aef8dfc10033007e99c333c31c2884c6a54f5ab459f99c2047e204bbf2e1074f5bc143aae1e0c257e3d7099ae6417e923d66fc5872c6e818fa616657bd23ab90b115b0ff4a1309dbd210cfc1a7ae929a935f398bf3173f243e874a66371aba938867326791c40855083d080e191c7678609506e9a075b02e2e1aa5efa381df9dfe22354b5d3f13d3dd6f83d8aa6fbe95862c1a1939278d27321cc917be9e4985405f02e6a9041134ce8b0148474b10c022525b30babaaa2b16821904c4e34466ccd0f328c056d4f2dba529d4acf58a70236f6d451104121dce4d33d618b1e273166e9a83d4ca0288286d7fe52b7b0f6c305386ecd067990ee9114d51b8e9be412592c4cf31e9fca47eb55b8fa852d7e1a20a6c175759532f6883fc5d2cde75c11dd975c707631cb92221a0956707b770a0e3195bd78fe80669c4290a2a5e9f4815ffcfc11f7efbf06cbb507da5d712e2fe710701ed29fa109f3dfb263f3034b4f4c383f71107bcc1de96b6788615a103dd845266a6470327decb71f33dd0ab01eac70b7b14fcf698ce78b56c5d80c32a29dd25d47f9592269a3f0023fb560f9a3b26d96bf32b1f1fa0624505fffbba76c74f5094ca70b80d827434a9652a5170f099be570a17785f6429f12c55975720d77f4c2543b7c9245c144566a7558d16a8741bb46facbce286a7a7f3b92076e71f2b00529a5b630e2f9d713972904692edeb57e10a1b56754c05503158f463a38e03ca1b8c4547278e9f4a250807f5a042a50f7dca25384959adaec108795f6386d352d80d6ae3001f25e30ec2f2885a41dcddfc2c13d29e67c5928616d9f3eb047a7f37a892c113a0e45084215dd8cc6537ef0102340992125fb0a40194dc59c4b6713f9af265190aa4e3f41cdd6bf6f8f8e8ba6f43665da1d33ff7c0800fb10b956a0dece94b21df3abb494f9760a0ff4b118d8e597d534129eaad8e8452f4f19424efed0bbc128d93214a2fa061cd678e680bd595b04e70720b340d79d05c2a59dd8b8a05ac239e9e5d5cd680bd0f8b4fdb5c05901953ab712f4c0bd500e3a429a2078e928c2a5ed3070d7cabe8172f5322f6badc45ce87f03959beae04a5d91bbc54a875af00000000000000000000000000000000000000000000000000000000000000000a2c10fd041ed4bbf5a9cd8a95c57b84e89d6ecd759163708e17060d63f91f872bff4cc8dab6bf2c241ce40428bf3cb1e2b4751f230fc10a892f6d1bd932022e0b3b83c6bf0eb7cd25cdd74a57fb366e0cbb5e41254e4346748209efe247a1240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c2d48f5f55b8d834bc3b5352788584b1fee9571adf9b0c1fdc73da00cb4ec5b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000273095c6c575251859fe3a70549ae2450250e797f77606f15ae38e340e3841d91f3ed3f992aacfc8eabb0a061ff0a9e14180b3a62037b25eb37f2f70e311872e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a424afa0688644b00134cb14257cfc0952c8e540d283e1a4fff83ea381ec34d1a424afa0688644b00134cb14257cfc0952c8e540d283e1a4fff83ea381ec34d1554c5ab66f08756a2661d3ffc13d63f8b615ece871db9e311f59475489b98ea1a73363c2e6a510752fb8086f3ce51acea7a40e92157c303cf585468e15bb76127bc809c36bab473ab241863715e88311fce6f26ec6daf0864bbd587fb14599e01e97eaa7465fbb11b87da892c581b099c3b59ccb09edefe993a81245e52c428079413018e087c8a199578e1c5a6b24e3b13636224b062ab26e2bdffa3394ff208294070c34359c04e788492bdba5a7713cd84f9e2b0fa538174517dc1eb3a77219b647c6b58781ace1ba69f7b9953385fb13282690912386c4fd074fed98f0608743f591ddbcc20021208005c5bda88e4a30716f0666efa2608700e56cb71801aca125f2ff4c183a080f044bdb06b17d9cd9bb307b18943a5f8d0435ff3b41125b1e8def0fe6a80c8d8faf2c9d2f62551ecfade66fb35cd87d86251f713832f014e9fbd77134263c756ca0c0e7947c7b2a75c9f4d7c9676548aefe75f28a5181c874ad1f26a24d358d8c2733c3cc4a179e8d248f2ae82de080593cfbf7cb57f10d061fbe3bd080bea278b24c6d033607f02ed0e2e12284b0dd6ed49224db6982694f14daa818579acb31515333b2e2c4aee3cb094e787368460953b384a7320254e86d03c4c2edd9146fb56255b3a0dff1708bc9b47e4b2331d91c79c044ca2234f5626393e2ebd12e296fa0f909ee58bc11fdf739a762a4121053a449261f4172a00a730c0d6c70e6416de9145bf24b56b31f703e414dfe541b9d8e96d4dc918df8ff8547036c15a9ca4c64546ad2518e3da5d0e4982bb28710fdf146a95bc2312efe113a109c933e39b783b9c5d57c48e1e30bec4297c9aabba7b72cde6ce1a73ef1222c8b23e964cf9e9b01c28ffcf1ffe4e7adc7a8f66722df40ea8c44424726896903ecd9031ab3f814812b825dba5e1849fb9efd9209a2bd0d6841b8c127a83cfaa1df338343336c66c8555eaadfabeadc59a3555ddafeb1e3d302cee052baf0f4a9d94026e2ae878816fb3c6ac023d0ab9e976d27c6fd6c9828b36d80813dd2b3fdd2bbe95dc5c786712105fa1fa7b6d6a5da6dc5165acad0dc623820e5008a2f0e311068e7c8e23db7e0ab3ae91736a96c07387a293362c2f949c5d0a62a7e885b38eacfe1906d9af34691b5a404e04d2ef70ae66f3948fb502efe51c20cb2ba6791f0945d94c095d7f94355835090a1a7f89e041fda80024288e5e";
        bytes memory proof = vm.ffi(inputs);
        
        bool success = mockProtocol.liquidate(proof, instances);
        assertEq(success, true, "Liquidation failed");
    }
}
